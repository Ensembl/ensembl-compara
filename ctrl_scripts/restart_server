#!/usr/local/bin/perl

=head1 LICENSE

Copyright [1999-2016] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=cut

use strict;
use warnings;

use FindBin qw($Bin);
use Getopt::Long qw(:config no_ignore_case);

BEGIN {
  require "$Bin/include.pl";
};

my $web_root = $SiteDefs::ENSEMBL_WEBROOT;

my ($help, $rmconfig, $delay, $single, $tail, $flush, $verbose, $species, @defines);

&GetOptions(
  "sp=s"        => \$species,
  "t|taillog"   => \$tail,
  "h|help"      => \$help,

  # start_server args
  "r|rmconfig"  => \$rmconfig,
  "f|flush"     => \$flush,
  "v|verbose"   => \$verbose,
  "D|define=s"  => \@defines,

  # stop_server args
  "d|delay=i"   => \$delay
);

if ($help) {
  print qq{
  Usage:
    ctrl_scripts/restart_server

  Options:
    -r, --rmconfig  : remove conf/config.packed before restarting the server
    -f, --flush     : flush memcached storage!
    -d N, --delay N : wait N seconds before restart \(to allow proper shutdown\)
    -sp             : rm conf/packed/species_name.*, or rm conf/packed/* if -s eq all
    -t, --taillog   : end the command with ./ctrl/taillog
    -D              : extra defines for apache
    -h, --help      : print this help message
};

  exit;
}

if ($species) {
  warn "SPECIES [$species]\n";

  if ($species eq 'all') {
    my $cmd = "rm $web_root/conf/packed/\*";
    `$cmd`;
    $rmconfig = 1; # to rebuild config
  } else {
    foreach my $sp (split /,/, $species) {
      my $f = "$web_root/conf/packed/$sp.db.packed";

      if (-e $f) {
        `rm $f`;
        warn " Removed $f ....\n";
        $rmconfig = 1; # to rebuild config
      } else {
        warn " WARNING: $sp not found ...\n";
      }
    }
  }
}

my $defines     = join(" ",map { "-D $_ " } @defines);
my $stop_args   = $delay ? "-d $delay" : '';
my $start_args  = join ' ', $rmconfig ? '-r' : '', $flush ? '-f' : '', $verbose ? '-v' : '', $defines;
my $argv        = join ' ', @ARGV;

my ($before_restart, $after_restart) = before_after_hooks('restart');

for (@$before_restart) {
  eval { require $_; };
  warn $@ if $@;
}

# stop and start the server
system("perl $Bin/stop_server $stop_args $argv")   == 0 or exit;
system("perl $Bin/start_server $start_args $argv") == 0 or exit;
warn "Restart OK.\n";

if ($tail) {
  system("$Bin/taillog") == 0 or exit;
}

for (@$after_restart) {
  eval { require $_; };
  warn $@ if $@;
}

exit;
