#!/usr/bin/env perl

=head1 LICENSE

Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
Copyright [2016-2017] EMBL-European Bioinformatics Institute

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=cut

use strict;
use warnings;

use FindBin qw($Bin);
use Getopt::Long;

BEGIN {
  require "$Bin/helper.pl";
};

my $PID = $SiteDefs::ENSEMBL_PIDFILE;

my ($help, $delay,$bounce);

&GetOptions(
  "d|delay=i" => \$delay,
  "h|help"    => \$help,
  "b|bounce"    => \$bounce,
);

if ($help) {
  print qq{
  Usage:
    ctrl_scripts/stop_server

  Options:
    -d N, --delay N : wait N seconds after stop \(to allow proper shutdown\)
    -h, --help      : print this help message
    -b, --bounce    : internal use only. (Set by restart)
};

  exit;
}

my ($before_stop, $after_stop) = before_after_hooks('stop');

for (@$before_stop) {
  eval { require $_; };
  warn $@ if $@;
}

eval {
  # stop the server
  warn "Stopping httpd daemon...\n";

  open (P, "<$PID") or die
    "Could not open PID file $PID: $!\n" .
    "STOP failed.\n";

  my $pid = <P>;
  close P;
  chomp $pid;

  if ($pid =~ /\d+/) {
    print "Killing $pid\n";
    kill('TERM', $pid) or warn "Could not stop server: $!.\nSTOP failed.\n";

    if ($delay) {
      if ($delay >= 0) {
        warn "Waiting $delay seconds for server to shut down...\n";
        sleep $delay;
      } else {
        warn "Waiting for process to die\n";

        my $begin = time;

        while (time - $begin < -$delay) {
          last unless kill(0, $pid);
          warn "process still exists\n";
          sleep 1;
        }
        warn "killed process with SIGKILL\n" if kill('KILL', -$pid);

        $begin = time;
        while(time - $begin < -$delay) {
          last unless kill(0,$pid);
          warn "process still exists\n";
          sleep 1;
        }
        warn "*** COULD NOT STOP SERVER: $!.\nSTOP failed.\n" if kill(0,$pid);

        warn "process gone\n";
      }
    }
  } else {
    warn "Invalid PID: $pid\nSTOP failed.\n";
  }
  unlink $PID unless $bounce;
};

warn $@ if $@;

for (@$after_stop) {
  eval { require $_; };
  warn $@ if $@;
}

warn "Done.\n";
