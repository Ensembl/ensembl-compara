#!/usr/local/bin/perl

=head1 LICENSE

Copyright [1999-2016] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=cut

use strict;
use warnings;

use FindBin qw($Bin);
use Getopt::Long;

BEGIN {
  require "$Bin/include.pl";
};

# Get some configs from SiteDefs
my $web_root      = $SiteDefs::ENSEMBL_WEBROOT;
my $conf_dir      = $SiteDefs::ENSEMBL_CONF_DIRS[0];
my $conf_file     = $SiteDefs::ENSEMBL_CONFIG_FILENAME;
my $memcached     = $SiteDefs::ENSEMBL_MEMCACHED;
my $apache_define = $SiteDefs::APACHE_DEFINE;
my $apache_dir    = $SiteDefs::APACHE_DIR;
my $apache_bin    = $SiteDefs::APACHE_BIN;
my $apache_conf   = $SiteDefs::ENSEMBL_HTTPD_CONFIG_FILE;

my ($help, $rmconfig, $flush, $verbose, @defines);

# parse command line options
&GetOptions(
  "r|rmconfig"  => \$rmconfig,
  "f|flush"     => \$flush,
  "v|verbose"   => \$verbose,
  "h|help"      => \$help,
  "D|define=s"  => \@defines
);

if ($help) {
  print qq(
  Usage:
    ctrl_scripts/start_server

  Options:
    -r, --rmconfig  : remove $conf_file before restarting the server and flush memcached
    -f, --flush     : flush memcached storage!
    -v, --verbose   : verbose the SiteDefs params value
    -D, --define    : list of arguments to be passed to apache httpd process
    -h, --help      : print this help message
);

  exit;
}

warn_line();
warn_string('start_server: Starting server');

# Create directory for packed files if it doesn't exist
if (! -e "$conf_dir/packed") {
  warn_string("Creating directory for packed files at $conf_dir/packed");
  system("mkdir -p $conf_dir/packed");
}

# If rebuilding the config file
if ($rmconfig) {
  warn_line();
  warn_string("Removing $conf_file");

  my $ok = unlink "$conf_dir/$conf_file";

  if ($ok) {
    warn_string("Removed $conf_file");
  } elsif (-e "$conf_dir/$conf_file") {
    warn_string("Could not delete $conf_dir/$conf_file: $!\n[WARN] Starting with old $conf_file!");
  }
}

# Additional processing for memcached
if ($memcached) {

  # Check memcached servers version
  warn_line();
  warn_string("Checking memcached compatibility...");

  my $res = system("$web_root/ctrl_scripts/memcached version");

  if ($res >> 8 > 0) {
    warn_string('failed');
    die_string('Please check www.ensembl.org/info/docs/webcode/mirror/memcached');
  }

  if ($flush || $rmconfig) {
    # Flush memcached
    my $cmd = "$web_root/ctrl_scripts/memcached flush_all";
    my @res = `$cmd`; chomp @res;

    warn_string("Flushed memcached entries for this server (@res)");
  }
}

warn_line();

my ($before_start, $after_start) = before_after_hooks('start');

# Build the httpd command string and run all commands
my $cmd = sprintf '%s -d %s -f %s %s', $apache_bin || "$apache_dir/bin/httpd", $apache_dir, $apache_conf, join(' ', map("-D$_", @defines, $apache_define ? grep(/\S/, split ' ', $apache_define) : ()));

require $_ for @$before_start;
system($cmd) and die_string("Could not start server: $!.\n[FATAL] Server start failed.");
require $_ for @$after_start;

SiteDefs::verbose_params() if $verbose;
