#!/usr/bin/env nextflow
/** See the NOTICE file distributed with this work for additional information
* regarding copyright ownership.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

params {
    ensembl_root_dir = "$ENSEMBL_ROOT_DIR"
    storage_dir = "$COMPARA_HPS"
    warehouse_dir = "$COMPARA_WAREHOUSE"
    long_term_bucket = "/storage/s3/long-term/"
    short_term_bucket = "/storage/s3/short-term/"
}

process {
    executor = 'slurm'
    queue = 'standard'
    perJobMemLimit = true
    perJobTimeLimit = true
    withLabel: rc_1Gb {
       memory = { 1.GB }
       time = 168.h
    }
    withLabel: rc_2Gb {
       memory = { 2.GB }
       time = 168.h
    }
    withLabel: rc_4Gb {
       memory =  { 4.GB }
       time =  168.h
    }
    withLabel: rc_8Gb {
       memory =  { 8.GB }
       time =  168.h
    }
    withLabel: rc_16Gb {
       memory =  { 16.GB }
       time =  168.h
    }
    withLabel: rc_32Gb {
       memory =  { 32.GB }
       time =  168.h
    }
    withLabel: rc_64Gb {
       memory =  { 64.GB }
       time =  168.h
    }
    withLabel: retry_with_4gb_mem_c1 {
       cpus = 1
       errorStrategy = { (task.exitStatus == 140 || task.exitStatus == 130) ? 'retry' : 'terminate' }
       memory = { 4.GB * task.attempt }
       time =  168.h
       maxRetries = { (task.exitStatus == 140 || task.exitStatus == 130) ? 10 : 1 }
    }
    withLabel: retry_with_8gb_mem_c5 {
       cpus = 5
       errorStrategy = { (task.exitStatus == 140 || task.exitStatus == 130) ? 'retry' : 'terminate' }
       memory = { 8.GB * task.attempt }
       time =  168.h 
       maxRetries = { (task.exitStatus == 140 || task.exitStatus == 130) ? 10 : 1 }
    }
    withLabel: retry_with_8gb_mem_c16 {
       cpus = 16
       errorStrategy = { (task.exitStatus == 140 || task.exitStatus == 130) ? 'retry' : 'terminate' }
       memory = { 8.GB * task.attempt }
       time = 168.h 
       maxRetries = { (task.exitStatus == 140 || task.exitStatus == 130) ? 10 : 1 }
    }
    withLabel: retry_with_8gb_mem_c32 {
       cpus = 32
       errorStrategy = { (task.exitStatus == 140 || task.exitStatus == 130) ? 'retry' : 'terminate' }
       memory = { 8.GB * task.attempt }
       time = 168.h 
       maxRetries = { (task.exitStatus == 140 || task.exitStatus == 130) ? 10 : 1 }
    }
    withLabel: retry_with_8gb_mem_c1 {
       cpus = 1
       errorStrategy = { (task.exitStatus == 140 || task.exitStatus == 130) ? 'retry' : 'terminate' }
       memory = { 8.GB * task.attempt }
       time = 168.h 
       maxRetries = { (task.exitStatus == 140 || task.exitStatus == 130) ? 10 : 1 }
    }
    withLabel: retry_with_16gb_mem_c1 {
       cpus = 1
       errorStrategy = { (task.exitStatus == 140 || task.exitStatus == 130) ? 'retry' : 'terminate' }
       memory = { 16.GB * task.attempt }
       time = 168.h
       maxRetries = { (task.exitStatus == 140 || task.exitStatus == 130) ? 16 : 1 }
    }
    withLabel: retry_with_16gb_mem_c16 {
       cpus = 16
       errorStrategy = { (task.exitStatus == 140 || task.exitStatus == 130) ? 'retry' : 'terminate' }
       memory = { 16.GB * task.attempt }
       time = 168.h
       maxRetries = { (task.exitStatus == 140 || task.exitStatus == 130) ? 10 : 1 }
    }
    withLabel: retry_with_16gb_mem_c32 {
       cpus = 32
       errorStrategy = { (task.exitStatus == 140 || task.exitStatus == 130) ? 'retry' : 'terminate' }
       memory = { 16.GB * task.attempt }
       time = 168.h
       maxRetries = { (task.exitStatus == 140 || task.exitStatus == 130) ? 10 : 1 }
    }
    withLabel: retry_with_32gb_mem_c32 {
       cpus = 32
       errorStrategy = { (task.exitStatus == 140 || task.exitStatus == 130) ? 'retry' : 'terminate' }
       memory = { 32.GB * task.attempt }
       time = 168.h
       maxRetries = { (task.exitStatus == 140 || task.exitStatus == 130) ? 8 : 1 }
    }	
    withLabel: retry_with_128gb_mem_c32 {
       cpus = 32
       queue = { task.attempt >= 2 ? 'bigmem' : 'standard' }
       errorStrategy = { (task.exitStatus == 140 || task.exitStatus == 130) ? 'retry' : 'terminate' }
       memory = { 128.GB * task.attempt }
       time = 168.h
       maxRetries = { (task.exitStatus == 140 || task.exitStatus == 130) ? 4 : 1 }
    }
}
