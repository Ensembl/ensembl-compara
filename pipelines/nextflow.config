#!/usr/bin/env nextflow
/** See the NOTICE file distributed with this work for additional information
* regarding copyright ownership.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

params {
    ensembl_root_dir = "$ENSEMBL_ROOT_DIR"
    storage_dir = "$COMPARA_HPS"
    warehouse_dir = "$COMPARA_WAREHOUSE"
    long_term_bucket = "/storage/s3/long-term/"
    short_term_bucket = "/storage/s3/short-term/"
}

process {
    executor = 'lsf'
    queue = 'standard'
    perJobMemLimit = true
    withLabel: lsf_default {
        clusterOptions = ' -C0 -M1000 '
    }
    withLabel: slurm_default {
        executor = 'slurm'
        queue = '1c2m20d'
        clusterOptions = ' --mem 2000 '
    }
    withLabel: rc_2Gb {
        clusterOptions = ' -C0 -M2000 '
    }
    withLabel: rc_4Gb {
        clusterOptions = ' -C0 -M4000 '
    }
    withLabel: rc_8Gb {
        clusterOptions = ' -C0 -M8000 '
    }
    withLabel: rc_16Gb {
        clusterOptions = ' -C0 -M16000 '
    }
    withLabel: rc_32Gb {
        clusterOptions = ' -C0 -M32000 '
    }
    withLabel: rc_64Gb {
        clusterOptions = ' -C0 -M64000 '
    }
    withLabel: lsf_64Gb_32C {
        clusterOptions = ' -n 32 -C0 -M64000 -R"span[hosts=1]" '
    }
    withLabel: slurm_64Gb_32C {
        executor = 'slurm'
        queue = '32c128m60d'
        clusterOptions = ' -n 32 -C0 -M64000 '
    }
    withLabel: retry_with_4gb_mem_c1 {
       cpus = 1
       errorStrategy = { (task.exitStatus == 140 || task.exitStatus == 130) ? 'retry' : 'terminate' }
       memory = { 4.GB * task.attempt }
       time = { 168.h }
       maxRetries = { (task.exitStatus == 140 || task.exitStatus == 130) ? 3 : 1 }
    }
    withLabel: retry_with_8gb_mem_c16 {
       cpus = 16
       errorStrategy = { (task.exitStatus == 140 || task.exitStatus == 130) ? 'retry' : 'terminate' }
       memory = { 8.GB * task.attempt }
       time = { 168.h }
       maxRetries = { (task.exitStatus == 140 || task.exitStatus == 130) ? 3 : 1 }
    }
    withLabel: retry_with_16gb_mem_c32 {
       cpus = 32
       errorStrategy = { (task.exitStatus == 140 || task.exitStatus == 130) ? 'retry' : 'terminate' }
       memory = { 16.GB * task.attempt }
       time = { 168.h }
       maxRetries = { (task.exitStatus == 140 || task.exitStatus == 130) ? 3 : 1 }
    }
    withLabel: retry_with_32gb_mem_c32 {
       cpus = 32
       errorStrategy = { (task.exitStatus == 140 || task.exitStatus == 130) ? 'retry' : 'terminate' }
       memory = { 32.GB * task.attempt }
       time = { 168.h }
       maxRetries = { (task.exitStatus == 140 || task.exitStatus == 130) ? 3 : 1 }
    }	
}
