#!/usr/local/bin/perl

=head1 LICENSE

Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
Copyright [2016] EMBL-European Bioinformatics Institute

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=cut

use strict;
use warnings;
no warnings 'uninitialized';

warn " Executing perl startup file\n";

# for things in the /perl directory
use ModPerl::Registry;

# for status info
use Apache2::Status;
use Apache2::SizeLimit;
use Apache2::ServerUtil;

use EnsEMBL::Web::Startup::XS;

my @xs_enabled;
BEGIN {
  @xs_enabled = @{EnsEMBL::Web::Startup::XS::bootstrap_begin()};
}

$Apache2::SizeLimit::MAX_PROCESS_SIZE = 1000000; # Kill httpd over 1000Mb

use CGI qw(-compile :cgi); # Load CGI.pm and call its compile method to precompile its autoloaded routines
use DBI;
use GD; # for making gifs
use Storable qw(nfreeze freeze thaw);

use Data::Dumper;
$Data::Dumper::Indent = 1;

use LoadPlugins;

use EnsEMBL::Web::Tools::DHTMLmerge;
use EnsEMBL::Web::SpeciesDefs;

my $conf = EnsEMBL::Web::SpeciesDefs->new;

# Setup the ORM DB connections before loading files
my $orm_connections = $conf->register_orm_databases;

if ($conf->ENSEMBL_MART_ENABLED > 0) {
  require 'BioMart/Initializer.pm';
  BioMart::Initialize->import;
  require 'BioMart/AttributeTable.pm';
  require 'BioMart/Configurator.pm';
  require 'BioMart/DatasetI.pm';
  require 'BioMart/Exception.pm';
  require 'BioMart/FormatterI.pm';
  require 'BioMart/Initializer.pm';
  require 'BioMart/Links.pm';
  require 'BioMart/Query.pm';
  require 'BioMart/QueryRunner.pm';
  require 'BioMart/Registry.pm';
  require 'BioMart/ResultTable.pm';
  require 'BioMart/Root.pm';
  require 'BioMart/RootI.pm';
  require 'BioMart/Web.pm';
  require 'BioMart/Configuration/Attribute.pm';
  require 'BioMart/Configuration/AttributeCollection.pm';
  require 'BioMart/Configuration/AttributeGroup.pm';
  require 'BioMart/Configuration/AttributeList.pm';
  require 'BioMart/Configuration/AttributeTree.pm';
  require 'BioMart/Configuration/BaseFilter.pm';
  require 'BioMart/Configuration/BooleanFilter.pm';
  require 'BioMart/Configuration/ConfigurationTree.pm';
  require 'BioMart/Configuration/DBLocation.pm';
  require 'BioMart/Configuration/FilterCollection.pm';
  require 'BioMart/Configuration/FilterGroup.pm';
  require 'BioMart/Configuration/FilterList.pm';
  require 'BioMart/Configuration/FilterTree.pm';
  require 'BioMart/Configuration/Location.pm';
  require 'BioMart/Configuration/MartDBLocation.pm';
  require 'BioMart/Configuration/MartURLLocation.pm';
  require 'BioMart/Configuration/Option.pm';
  require 'BioMart/Configuration/PushAction.pm';
  require 'BioMart/Configuration/RegistryDBPointer.pm';
  require 'BioMart/Configuration/RegistryURLPointer.pm';
  require 'BioMart/Configuration/URLLocation.pm';
  require 'BioMart/Configuration/ValueFilter.pm';
  require 'BioMart/Configuration/VirtualSchema.pm';
  require 'BioMart/Dataset/GenomicAlign.pm';
  require 'BioMart/Dataset/GenomicMAlign.pm';
  require 'BioMart/Dataset/GenomicSequence.pm';
  require 'BioMart/Dataset/GenomicSequenceMod.pm';
  require 'BioMart/Dataset/TableSet.pm';
  require 'BioMart/Dataset/GenomicSequence/DNAAdaptor.pm';
  require 'BioMart/Formatter/ADF.pm';
  require 'BioMart/Formatter/AXT.pm';
  require 'BioMart/Formatter/AXTPLUS.pm';
  require 'BioMart/Formatter/CSV.pm';
  require 'BioMart/Formatter/FASTA.pm';
  require 'BioMart/Formatter/FASTAA.pm';
  require 'BioMart/Formatter/FASTACDNA.pm';
  require 'BioMart/Formatter/FASTAH.pm';
  require 'BioMart/Formatter/GFF.pm';
  require 'BioMart/Formatter/HTML.pm';
  require 'BioMart/Formatter/MAF.pm';
  require 'BioMart/Formatter/MAF_NOPREVIEW.pm';
  require 'BioMart/Formatter/MAF_RESTRICTED.pm';
  require 'BioMart/Formatter/MFA.pm';
  require 'BioMart/Formatter/MFASTA.pm';
  require 'BioMart/Formatter/TSV.pm';
  require 'BioMart/Formatter/TXT.pm';
  require 'BioMart/Formatter/XLS.pm';
  require 'BioMart/Formatter/CSV_36.pm';
  require 'BioMart/Formatter/HTML_36.pm';
  require 'BioMart/Formatter/TSV_36.pm';
  require 'BioMart/Formatter/ALL.pm';
  require 'BioMart/Formatter/ALL_TSV.pm';
  require 'BioMart/Formatter/DIFF.pm';
  require 'BioMart/Formatter/DIFF_TSV.pm';
  require 'BioMart/Formatter/SAME.pm';
  require 'BioMart/Formatter/SAME_TSV.pm';
  require 'BioMart/Web/CGIXSLT.pm';
  require 'BioMart/Web/PageStub.pm';
  require 'BioMart/Web/SiteDefs.pm';
  require 'BioMart/Web/TemplateBuilder.pm';
  require 'BioMart/Web/Zlib.pm';
}

# below are needed for renewing from the saved martconf.packed file

if (Apache2::ServerUtil::restart_count == 1) { # Only parse the config on first pass
  $conf->store;
  
  EnsEMBL::Web::Tools::DHTMLmerge::merge_all($conf);

  # dynamically build mart registry file
  if (keys %{$conf->{'_multi'}{'marts'}} && !$SiteDefs::ENSEMBL_NOMART) { # NOMARTS
    require EnsEMBL::Web::Tools::MartRegistry;
    EnsEMBL::Web::Tools::MartRegistry::create($conf->multidb, $conf->marts);
    
    my $mr_file = "${SiteDefs::ENSEMBL_SERVERROOT}/biomart-perl/conf/martRegistry.xml";
    
    if (! -e $mr_file) {
      open  FH, ">$mr_file";
      print FH $conf->create_martRegistry;
      close FH;
    }                             
  }
  
  # Remove cached image files
  my @cached_images = map { glob($conf->ENSEMBL_TMP_DIR_CACHE."/$_.*") } 'mapview', 'chromoview';
  my $icount        = unlink @cached_images;
  
  warn "[CONF]    [INFO] Removed $icount cached image files\n" if $icount;
  warn "[CONF]    [WARN] Some cached image files not removed: $!" unless $icount == @cached_images;

  my $extra = '';
  
  if ($conf->ENSEMBL_MEMCACHED && $conf->ENSEMBL_MEMCACHED->{'servers'} && @{$conf->ENSEMBL_MEMCACHED->{'servers'} || []}) {
    eval { require EnsEMBL::Web::Cache; };
    
    if (!$@ && EnsEMBL::Web::Cache->new) {
      $extra .= '
 Memcached enabled:  ' . join "\n                     ", sort @{$conf->ENSEMBL_MEMCACHED->{'servers'} || []};
    
      $extra .= '

 Memcached flags:    '. join "\n                     ", sort @{$conf->ENSEMBL_MEMCACHED->{'flags'} || []};
    }
  }

  if ($conf->ENSEMBL_DEBUG_FLAGS & $conf->ENSEMBL_DEBUG_VERBOSE_STARTUP) {
    my $i = 1;
    my $T = $conf->ENSEMBL_DEBUG_FLAGS;
    $extra .= '

 Debug flags:        ' . join "\n                     ", map { $T & (($i <<= 1) >> 1) ? ucfirst lc =~ s/_/ /rg : () } @{$conf->ENSEMBL_DEBUG_FLAG_NAMES};

    $i = 0;
    $extra .= '

==============================================================================

 Species' . 
    join("\n        ", 
      map { sprintf '%4d  %-6.6s %-32.32s %s', ++$i, $conf->get_config($_, 'SPECIES_RELEASE_VERSION'), $_, $conf->get_config($_, 'SPECIES_COMMON_NAME') } @{$conf->ENSEMBL_DATASETS}
    );
  }
 
  # Timestamp file for last start
  open(STARTED,'>',"${SiteDefs::ENSEMBL_SERVERROOT}/ensembl-webcode/conf/started");
  close STARTED;
  if($SiteDefs::MEMOIZE_ENABLED) {
    warn "MEMOIZE ${SiteDefs::ENSEMBL_TMP_DIR}/procedure/started\n";
    open(STARTED,'>',"${SiteDefs::ENSEMBL_TMP_DIR}/procedure/started");
    close STARTED;
  }
 
  warn sprintf '
==============================================================================
 Server information:
==============================================================================

 Ensembl version:    %d

 Database Host:      %s

 ORM Databases:      %s

 External address:   %s/
 Real address:       %s://%s:%s
 Mobile URL:         %s

 Search Server:      %s

 Cache namespace:    %s

 Server root:        %s

 PID file:           %s
 Access logs:        %s
 Error logs:         %s

 CSS file(s):        %s
 JavaScript file(s): %s

 Using XS:           %s

 Identities used:    %s

 Plugins installed:  %s
 Cohort:             %s

==============================================================================

',
  $conf->ENSEMBL_VERSION,

  $conf->DATABASE_HOST,

  (keys %$orm_connections ? join("\n                     ", map { sprintf '%-15s %s on %s:%s', "$_:", $orm_connections->{$_}->database, $orm_connections->{$_}->host, $orm_connections->{$_}->port } keys %$orm_connections) : 'None'),

  $conf->ENSEMBL_BASE_URL,
  $conf->ENSEMBL_PROTOCOL, $conf->ENSEMBL_SERVER,     $conf->ENSEMBL_PORT,
  $conf->MOBILE_URL,

  $conf->LUCENE_ENDPOINT,

  $conf->ENSEMBL_BASE_URL,

  $conf->ENSEMBL_SERVERROOT,

  $conf->ENSEMBL_PIDFILE,
  $conf->ENSEMBL_CUSTOMLOG,
  $conf->ENSEMBL_ERRORLOG,

  map(join("\n".(' ' x 21), map { sprintf '%-15s %s%s', $_->name.':', $conf->ENSEMBL_BASE_URL, $_->minified_url_path } @{$conf->ENSEMBL_JSCSS_FILES->{$_} || []}) || 'None', qw(css js)),

  @xs_enabled?join("\n".(' ' x 21),@xs_enabled):'- none -',
  join("\n".(' 'x21),map { "$_ (".$conf->ENSEMBL_IDS_USED->{$_}.")" } sort keys %{$conf->ENSEMBL_IDS_USED}),
  join("\n                     ", grep(/::/, map { "$_ (".join(',',@{$conf->ENSEMBL_PLUGINS_USED->{$_}||[]}).")" } @{$conf->ENSEMBL_PLUGINS || []}), $extra),
  $conf->ENSEMBL_COHORT;
}

1;
